import click
import torch
from model.llm.rwkv_asr import RWKV7ASRModel
from rwkvfla.models.rwkv7.modeling_rwkv7 import RWKV7Config, RWKV7Model, RWKV7ForCausalLM
from tokenizer.rwkv_tokenizer import RWKV_TOKENIZER
from transformers import AutoTokenizer
from sparktts.models.audio_tokenizer import BiCodecTokenizer
from sparktts.utils.audio import load_audio
@click.command()
@click.option("--audio_lm_path", type=str, required=True)
@click.option("--llm_path", type=str, required=True)
@click.option("--ckpt_path", type=str, required=True)
@click.option("--language", type=str, required=True)
@click.option("--device", type=str, required=False,default="cuda:0")
@click.option("--bicodec_path", type=str, required=False,default="/home/yueyulin/models/Spark-TTS-0.5B/")
@click.option("--audio_path", type=str, required=False,default="/home/yueyulin/github/RWKVTTS/my_chinese.wav")
def generate_single_sample(audio_lm_path, llm_path, ckpt_path, language, device, bicodec_path, audio_path):
    audio_lm_model = RWKV7Model.from_pretrained(audio_lm_path)
    llm_model = RWKV7ForCausalLM.from_pretrained(llm_path)
    asr_model = RWKV7ASRModel(audio_lm_model, llm_model)
    info = asr_model.load_state_dict(torch.load(ckpt_path),strict=False)
    print(info)
    asr_model.eval()
    asr_model = asr_model.to(torch.bfloat16).to(device)
    print(asr_model)
    tokenizer = AutoTokenizer.from_pretrained(llm_path,trust_remote_code=True)
    print(tokenizer)
    global_tokens = [2131, 3121, 1525, 3391, 2398, 2002, 1701, 110, 2685, 1327, 1555, 3469, 1219, 2542, 410, 2989, 3931, 1204, 2006, 3919, 435, 922, 3077, 3335, 2685, 3792, 1367, 30, 249, 4050, 2596, 3744]
    global_tokens = [g+8192 for g in global_tokens]
    audio_tokens_chinese = [5668, 7563, 2347, 1131, 6278, 6848, 6251, 6861, 573, 6406, 4702, 6406, 4030, 3433, 6197, 5100, 5649, 4403, 7810, 2519, 1630, 5601, 2288, 1412, 3159, 661, 6825, 7434, 2738, 2159, 6169, 316, 5849, 6265, 6350, 6808, 5528, 7198, 1306, 4833, 4143, 2012, 3704, 2243, 3297, 4104, 2265, 3672, 4939, 418, 2046, 937, 7244, 5348, 450, 5498, 4071, 1241, 3455, 7943, 7925, 4255, 3691, 3068, 390, 6823, 8108, 2086, 1707, 1394, 2380, 4844, 952, 1895, 684, 7169, 761, 7698, 166, 3123, 435, 3148, 7077, 319, 2859, 2557, 3789, 1668, 4223, 182, 2066, 5767, 3836, 2019, 7235, 1586, 2744, 6376, 7858, 3587, 4196, 2429, 7087, 1682, 1983, 2312, 4925, 5553, 1614, 955, 90, 2443, 1796, 235, 2179, 5925, 7641, 6769, 694, 2801, 2328, 7182, 851, 4299, 1978, 7342, 4223, 2494, 7258, 8019, 1711, 1856, 3515, 3492, 546, 5384, 3702, 34, 6266, 558, 8095, 1049, 5453, 1518, 3066, 5094, 6947, 7303, 7881, 2021, 523, 4824, 4571, 109, 7332, 318, 773, 1548, 4394, 1405, 3671, 7783, 6059, 103, 521, 7539, 6290, 4179, 2329, 2888, 1453, 405, 2651, 5195, 3385, 6104, 5417, 3513, 1396, 1313, 6168, 6095, 5605, 5413, 5549, 3924, 6071, 2660, 1023, 6085, 6484, 7681, 1946, 7669, 3324, 721, 2796, 1221, 3759, 1413, 2326, 3502, 5197, 5992, 1219, 664, 685, 2201, 8060, 6893, 6670, 4598, 3838, 2757, 6068, 6563, 296, 6472, 5417, 2748, 5642, 2107, 6644, 7112, 2610, 744, 3892, 2867, 2610, 7612, 7670, 3633, 7059, 7073, 4212, 7557, 7609, 6671, 2971, 1279, 3526, 6041, 2963, 2410, 6199, 1898, 172, 6989, 1681, 259, 5239, 6560, 2148, 2465, 6319, 259, 4037, 8174, 1660, 6146, 1797, 2858, 6327, 6080, 2855, 7625, 5102, 6419, 6753, 6249, 903, 2875, 3474, 2829, 4092, 7664, 6969, 2572, 2581, 7220, 646, 2298, 1452, 614, 2133, 4589, 4197, 7991, 897, 3770, 2785, 4275, 2469, 7062, 3610, 6495, 2575, 6399, 1045, 5629, 1591, 5072, 6922, 7637, 5769, 6115, 3257, 1627, 4308, 6451, 7661, 3956, 241, 1734, 6622, 5663, 6302, 644, 882, 7877, 718, 7863, 2029, 355, 6191, 5995, 1124, 2521, 6734, 2311, 2632, 993, 110, 5341, 3030, 5100, 89, 3523, 4987, 6453, 3396, 3741, 4671, 761, 2637, 4463, 4446, 1170, 2133, 1651, 2745, 4955, 6804, 5389, 6915, 7013, 5414, 1545, 7408, 7383, 3200, 4777, 4668, 6053, 4405, 887, 7815, 3977, 2251, 4675, 4752, 5372, 7806, 32, 2739, 5810, 6287, 4794, 4970, 4741, 7036, 5923, 2393, 6734, 2072, 6136, 1549, 2847, 569, 707, 2299, 6525, 5955, 1443, 4170, 7873, 7178, 3468, 7886, 3345, 8036, 8181, 1136, 7444, 8048, 7052, 5146, 4666, 6476, 4420, 8013, 5054, 187, 6536, 5930, 4233, 7975, 6418, 6553, 6122, 4990, 2400, 7147, 4689, 4951, 4534, 5560, 1218, 5033, 7906, 3345, 3121, 3468, 6766, 5386, 598, 899, 106, 408, 6066, 6233, 6828, 4212, 2749, 1034, 458, 1054, 1813, 6541, 696, 2604, 1611, 3957, 5760, 4991, 4043, 6729, 6022, 5153, 3172, 6841, 5655, 7408, 6341, 5293, 1419, 4925, 415, 1053, 3890, 7758, 7213, 4906, 2212, 1606, 5694, 7837, 1750, 4075, 4619, 2543, 1539, 5849, 569, 8023, 5432, 1253, 7412, 5571, 1721, 6369, 1383, 700, 389, 4321, 7947, 2329, 3508, 1734, 4384, 5985, 5839, 3906, 92, 7236, 5857, 2631, 3284, 6001, 7856, 2732, 67, 5158, 7678, 6511, 4974, 2652, 4094, 5595, 7397, 5265, 2420, 3954, 939, 4775, 8069, 8006, 3762, 4311, 6895, 1019, 3463, 258, 2303, 4144, 6856, 2862, 1062, 1949, 4783, 7230, 20, 2862, 895, 8166, 3465, 1180, 2438, 3695, 4021, 1323, 6471, 6429, 3661, 7408, 3935, 3523, 6831, 3056, 6386, 4697, 207, 3536, 2385, 5074, 2718, 6945, 4755, 1345, 2024, 2456, 7333, 1422, 1233, 1210, 1707, 638, 6445, 1971, 7889, 2192, 1834, 6584, 5855, 1323, 6041, 1530, 318, 4115, 3031, 8009, 6065, 533, 6388, 5303, 5541, 3493, 5293, 1191, 1400, 5571, 2307, 5690, 3366, 5338, 8072, 4392, 4716, 7067, 387, 2866, 6078, 3495, 7305, 7467, 6299, 3463, 2749, 6389, 2596, 2098, 4223, 6216, 4996, 6122, 1397, 4514, 2613, 2225, 6611, 5604, 5525, 3670, 3308, 6912, 3954, 6621, 5392, 1577, 2181, 5542, 7907, 3950, 4515, 426, 6463, 5092, 684, 7100, 5607, 4207, 1156, 1355, 4424, 7529, 207, 2430, 8054, 2311, 4958]
    audio_tokens_english = [5668, 7563, 2347, 1131, 6278, 6848, 6251, 6861, 573, 6406, 4702, 6406, 4030, 3433, 6197, 5100, 5649, 4403, 7810, 2519, 1630, 5601, 2288, 1412, 3159, 661, 6825, 7434, 2738, 2159, 6169, 316, 5849, 6265, 6350, 6808, 5528, 7198, 1306, 4833, 4143, 2012, 3704, 2243, 3297, 4104, 2265, 3672, 4939, 418, 2046, 937, 7244, 5348, 450, 5498, 4071, 1241, 3455, 7943, 7925, 4255, 3691, 3068, 390, 6823, 8108, 2086, 1707, 1394, 2380, 4844, 952, 1895, 684, 7169, 761, 7698, 166, 3123, 435, 3148, 7077, 319, 2859, 2557, 3789, 1668, 4223, 182, 2066, 5767, 3836, 2019, 7235, 1586, 2744, 6376, 7858, 3587, 4196, 2429, 7087, 1682, 1983, 2312, 4925, 5553, 1614, 955, 90, 2443, 1796, 235, 2179, 5925, 7641, 6769, 694, 2801, 2328, 7182, 851, 4299, 1978, 7342, 4223, 2494, 7258, 8019, 1711, 1856, 3515, 3492, 546, 5384, 3702, 34, 6266, 558, 8095, 1049, 5453, 1518, 3066, 5094, 6947, 7303, 7881, 2021, 523, 4824, 4571, 109, 7332, 318, 773, 1548, 4394, 1405, 3671, 7783, 6059, 103, 521, 7539, 6290, 4179, 2329, 2888, 1453, 405, 2651, 5195, 3385, 6104, 5417, 3513, 1396, 1313, 6168, 6095, 5605, 5413, 5549, 3924, 6071, 2660, 1023, 6085, 6484, 7681, 1946, 7669, 3324, 721, 2796, 1221, 3759, 1413, 2326, 3502, 5197, 5992, 1219, 664, 685, 2201, 8060, 6893, 6670, 4598, 3838, 2757, 6068, 6563, 296, 6472, 5417, 2748, 5642, 2107, 6644, 7112, 2610, 744, 3892, 2867, 2610, 7612, 7670, 3633, 7059, 7073, 4212, 7557, 7609, 6671, 2971, 1279, 3526, 6041, 2963, 2410, 6199, 1898, 172, 6989, 1681, 259, 5239, 6560, 2148, 2465, 6319, 259, 4037, 8174, 1660, 6146, 1797, 2858, 6327, 6080, 2855, 7625, 5102, 6419, 6753, 6249, 903, 2875, 3474, 2829, 4092, 7664, 6969, 2572, 2581, 7220, 646, 2298, 1452, 614, 2133, 4589, 4197, 7991, 897, 3770, 2785, 4275, 2469, 7062, 3610, 6495, 2575, 6399, 1045, 5629, 1591, 5072, 6922, 7637, 5769, 6115, 3257, 1627, 4308, 6451, 7661, 3956, 241, 1734, 6622, 5663, 6302, 644, 882, 7877, 718, 7863, 2029, 355, 6191, 5995, 1124, 2521, 6734, 2311, 2632, 993, 110, 5341, 3030, 5100, 89, 3523, 4987, 6453, 3396, 3741, 4671, 761, 2637, 4463, 4446, 1170, 2133, 1651, 2745, 4955, 6804, 5389, 6915, 7013, 5414, 1545, 7408, 7383, 3200, 4777, 4668, 6053, 4405, 887, 7815, 3977, 2251, 4675, 4752, 5372, 7806, 32, 2739, 5810, 6287, 4794, 4970, 4741, 7036, 5923, 2393, 6734, 2072, 6136, 1549, 2847, 569, 707, 2299, 6525, 5955, 1443, 4170, 7873, 7178, 3468, 7886, 3345, 8036, 8181, 1136, 7444, 8048, 7052, 5146, 4666, 6476, 4420, 8013, 5054, 187, 6536, 5930, 4233, 7975, 6418, 6553, 6122, 4990, 2400, 7147, 4689, 4951, 4534, 5560, 1218, 5033, 7906, 3345, 3121, 3468, 6766, 5386, 598, 899, 106, 408, 6066, 6233, 6828, 4212, 2749, 1034, 458, 1054, 1813, 6541, 696, 2604, 1611, 3957, 5760, 4991, 4043, 6729, 6022, 5153, 3172, 6841, 5655, 7408, 6341, 5293, 1419, 4925, 415, 1053, 3890, 7758, 7213, 4906, 2212, 1606, 5694, 7837, 1750, 4075, 4619, 2543, 1539, 5849, 569, 8023, 5432, 1253, 7412, 5571, 1721, 6369, 1383, 700, 389, 4321, 7947, 2329, 3508, 1734, 4384, 5985, 5839, 3906, 92, 7236, 5857, 2631, 3284, 6001, 7856, 2732, 67, 5158, 7678, 6511, 4974, 2652, 4094, 5595, 7397, 5265, 2420, 3954, 939, 4775, 8069, 8006, 3762, 4311, 6895, 1019, 3463, 258, 2303, 4144, 6856, 2862, 1062, 1949, 4783, 7230, 20, 2862, 895, 8166, 3465, 1180, 2438, 3695, 4021, 1323, 6471, 6429, 3661, 7408, 3935, 3523, 6831, 3056, 6386, 4697, 207, 3536, 2385, 5074, 2718, 6945, 4755, 1345, 2024, 2456, 7333, 1422, 1233, 1210, 1707, 638, 6445, 1971, 7889, 2192, 1834, 6584, 5855, 1323, 6041, 1530, 318, 4115, 3031, 8009, 6065, 533, 6388, 5303, 5541, 3493, 5293, 1191, 1400, 5571, 2307, 5690, 3366, 5338, 8072, 4392, 4716, 7067, 387, 2866, 6078, 3495, 7305, 7467, 6299, 3463, 2749, 6389, 2596, 2098, 4223, 6216, 4996, 6122, 1397, 4514, 2613, 2225, 6611, 5604, 5525, 3670, 3308, 6912, 3954, 6621, 5392, 1577, 2181, 5542, 7907, 3950, 4515, 426, 6463, 5092, 684, 7100, 5607, 4207, 1156, 1355, 4424, 7529, 207, 2430, 8054, 2311, 4958]
    chinese_instruction = "User: 把以下音频转写为中文。\n"
    english_instruction = "User: Convert the audios to English.\n"
    hints_str = "\nAssistant:"
    text_input_ids_chinese = torch.tensor(tokenizer.encode(chinese_instruction), dtype=torch.long,device=device).unsqueeze(0)
    text_input_ids_english = torch.tensor(tokenizer.encode(english_instruction), dtype=torch.long,device=device).unsqueeze(0)
    hints_ids = torch.tensor(tokenizer.encode(hints_str), dtype=torch.long,device=device).unsqueeze(0)
    audio_tokens = global_tokens + audio_tokens_chinese
    audio_tokens = torch.tensor(audio_tokens, dtype=torch.long,device=device).unsqueeze(0)
    output = asr_model.inference_single(audio_tokens, text_input_ids_chinese, hints_ids)
    print(output)
    print(tokenizer.decode(output))
    print('---------------------------')
    audio_tokens = global_tokens + audio_tokens_english
    audio_tokens = torch.tensor(audio_tokens, dtype=torch.long,device=device).unsqueeze(0)
    output = asr_model.inference_single(audio_tokens, text_input_ids_english, hints_ids)
    print(output)
    print(tokenizer.decode(output))
    print(f'load bicodec tokenizer from {bicodec_path}')
    audio_tokenizer = BiCodecTokenizer(bicodec_path)
    print(audio_tokenizer)
    wav = load_audio(audio_path,sampling_rate=audio_tokenizer.config['sample_rate'],volume_normalize=audio_tokenizer.config["volume_normalize"],)
    global_tokens, semantic_tokens = audio_tokenizer.tokenize(wav)

    print(global_tokens)
    print(semantic_tokens)

    print(global_tokens.shape)
    print(semantic_tokens.shape)
    semantic_tokens = semantic_tokens.to(device)
    # output = asr_model.inference_single(semantic_tokens, text_input_ids_chinese, hints_ids)
    # print(output)
    # print(tokenizer.decode(output))
    # print('---------------------------')
if __name__ == "__main__":
    generate_single_sample()