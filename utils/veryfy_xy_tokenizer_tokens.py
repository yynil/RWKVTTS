from XY_Tokenizer.xy_tokenizer.model import XY_Tokenizer
import argparse
import torch
import ast
import torchaudio
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config_path', type=str, default='third_party/XY_Tokenizer/config/xy_tokenizer_config.yaml')
    parser.add_argument('--ckpt_path', type=str, default='/home/yueyulin/models/XY_Tokenizer_TTSD_V0/xy_tokenizer.ckpt')
    parser.add_argument('--device', type=str, default='cuda:0')
    parser.add_argument('--audio_tokens', type=str, default='[[269, 269, 506, 506, 757, 441, 350, 194, 831, 847, 822, 566, 409, 531, 218, 225, 649, 923, 770, 998, 877, 948, 189, 414, 106, 822, 32, 623, 779, 236, 369, 897, 286, 305, 312, 699, 724, 6, 99, 822, 793, 897, 794, 903, 603, 284, 829, 19, 925, 794, 93, 19, 153, 256, 394, 926, 506, 499, 463, 256, 420, 686, 595, 506, 93, 680, 857, 881, 785, 37, 608, 725, 119, 967, 826, 429, 849, 750, 169, 794, 749, 319, 111, 601, 277, 774, 803, 586, 465, 195, 291, 945, 495, 553, 996, 632, 404, 295, 593, 903, 465, 336, 794, 737, 897, 30, 43, 43, 506, 601, 506, 506], [377, 377, 633, 949, 111, 631, 958, 193, 73, 180, 656, 412, 426, 357, 347, 579, 579, 43, 855, 613, 910, 972, 620, 923, 998, 966, 952, 210, 334, 239, 966, 888, 995, 473, 257, 629, 410, 326, 194, 525, 257, 128, 919, 800, 1004, 974, 958, 193, 850, 211, 967, 1005, 459, 223, 73, 132, 431, 659, 762, 599, 389, 603, 473, 336, 336, 430, 465, 202, 90, 662, 184, 744, 921, 783, 758, 998, 422, 316, 128, 511, 974, 563, 869, 273, 128, 215, 314, 563, 487, 1011, 881, 831, 274, 413, 23, 335, 360, 434, 414, 1002, 455, 504, 736, 915, 995, 854, 685, 137, 883, 837, 883, 220], [820, 74, 93, 77, 711, 852, 755, 246, 69, 15, 88, 184, 743, 82, 239, 873, 327, 448, 622, 767, 441, 946, 863, 190, 644, 86, 207, 528, 409, 1016, 977, 561, 912, 487, 242, 185, 174, 790, 527, 746, 899, 740, 135, 376, 549, 576, 809, 915, 207, 774, 1018, 797, 43, 855, 1005, 260, 672, 244, 769, 1020, 233, 711, 207, 295, 386, 89, 220, 841, 89, 342, 282, 696, 489, 214, 498, 129, 136, 187, 543, 834, 611, 135, 267, 428, 44, 577, 92, 751, 295, 215, 585, 471, 102, 262, 568, 670, 611, 594, 732, 213, 295, 683, 334, 730, 711, 613, 113, 195, 365, 446, 244, 93], [809, 883, 646, 646, 266, 88, 122, 175, 511, 565, 44, 615, 749, 391, 373, 735, 555, 871, 916, 604, 470, 746, 380, 115, 473, 578, 807, 955, 487, 252, 876, 1003, 746, 558, 350, 16, 634, 324, 677, 65, 573, 555, 166, 61, 497, 995, 283, 1007, 577, 304, 433, 389, 492, 389, 422, 166, 389, 212, 159, 189, 61, 88, 224, 927, 952, 511, 857, 181, 90, 584, 496, 119, 591, 363, 283, 457, 492, 553, 261, 919, 217, 580, 341, 234, 710, 174, 376, 292, 557, 900, 462, 728, 728, 11, 69, 582, 765, 184, 571, 618, 722, 900, 180, 496, 286, 677, 308, 419, 70, 412, 1010, 917], [386, 116, 156, 866, 126, 72, 294, 628, 865, 658, 522, 265, 1010, 985, 114, 164, 373, 288, 110, 439, 330, 70, 499, 523, 1000, 27, 229, 475, 651, 55, 392, 505, 265, 792, 736, 263, 126, 646, 913, 429, 865, 489, 145, 505, 590, 385, 728, 135, 124, 9, 574, 376, 514, 123, 715, 716, 904, 582, 471, 79, 181, 740, 367, 233, 672, 487, 187, 566, 283, 412, 918, 68, 65, 994, 921, 932, 800, 930, 666, 42, 315, 932, 821, 844, 638, 49, 1012, 192, 171, 977, 906, 744, 301, 481, 349, 628, 995, 398, 415, 508, 714, 917, 800, 233, 952, 817, 795, 323, 959, 347, 795, 320], [500, 84, 821, 732, 262, 972, 27, 1004, 306, 200, 769, 158, 725, 354, 487, 527, 284, 788, 519, 946, 727, 144, 965, 299, 867, 361, 832, 691, 85, 717, 11, 926, 273, 466, 700, 935, 476, 590, 893, 925, 774, 962, 774, 636, 313, 14, 76, 808, 210, 341, 778, 780, 326, 721, 1000, 512, 655, 573, 188, 310, 306, 967, 249, 1004, 930, 760, 63, 128, 765, 969, 847, 433, 277, 663, 379, 340, 224, 961, 876, 251, 573, 651, 969, 868, 586, 726, 698, 466, 400, 769, 377, 630, 474, 782, 936, 13, 152, 574, 867, 841, 890, 923, 14, 884, 139, 348, 181, 670, 714, 65, 688, 555], [447, 978, 185, 935, 983, 76, 828, 910, 964, 26, 47, 533, 615, 56, 188, 64, 205, 904, 307, 416, 809, 160, 811, 511, 118, 435, 725, 954, 143, 43, 804, 473, 850, 740, 399, 898, 129, 194, 615, 706, 169, 418, 278, 903, 579, 856, 433, 999, 809, 144, 568, 729, 23, 304, 688, 711, 194, 515, 255, 528, 674, 690, 25, 415, 406, 646, 933, 615, 46, 793, 581, 566, 159, 870, 488, 542, 576, 102, 532, 56, 907, 994, 557, 86, 783, 762, 26, 343, 483, 758, 74, 568, 762, 643, 76, 1008, 931, 268, 201, 534, 1009, 777, 228, 931, 44, 475, 477, 192, 294, 325, 44, 718], [592, 598, 523, 389, 164, 822, 539, 780, 648, 953, 437, 172, 312, 303, 236, 39, 48, 87, 445, 639, 556, 64, 804, 107, 1001, 602, 200, 704, 815, 388, 947, 346, 107, 644, 201, 49, 83, 681, 176, 49, 200, 116, 554, 544, 547, 673, 737, 723, 535, 508, 897, 889, 811, 762, 241, 781, 146, 827, 91, 224, 367, 554, 443, 37, 585, 970, 657, 801, 508, 873, 512, 928, 396, 334, 959, 1006, 507, 163, 557, 756, 603, 23, 539, 973, 90, 106, 302, 79, 768, 695, 859, 440, 310, 151, 953, 196, 942, 772, 549, 909, 880, 490, 247, 621, 395, 358, 112, 721, 48, 298, 260, 544]]', help='Audio tokens as a string representation of 2D array')
    args = parser.parse_args()

    # 将字符串转换为二维数组
    audio_tokens = ast.literal_eval(args.audio_tokens)
    print(f"Audio tokens shape: {len(audio_tokens)} x {len(audio_tokens[0]) if audio_tokens else 0}")
    print(f"First few tokens: {audio_tokens[0][:10] if audio_tokens else []}")

    tokenizer = XY_Tokenizer.load_from_checkpoint(args.config_path, args.ckpt_path)
    tokenizer.to(args.device)
    tokenizer.eval()
    if len(audio_tokens) == 8:
        output = tokenizer.decode([torch.tensor(audio_tokens, dtype=torch.long, device=args.device)], device=args.device)
        print(f"Output shape: {len(output['syn_wav_list'])}")
        torchaudio.save('output.wav', output['syn_wav_list'][0].cpu().reshape(1, -1), tokenizer.output_sample_rate)
    else:
        print(f'wrong codes book length {len(audio_tokens)}')

if __name__ == "__main__":
    main()